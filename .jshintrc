{
  // Enforcing
  "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.)
  "camelcase"     : false,    // Identifiers must be in camelCase
  "curly"         : false,    // Require {} for every new block or scope
  "eqeqeq"        : true,     // Require triple equals (===) for comparison
  "es3"           : false,    // Adhere to ECMAScript 3
  "forin"         : true,     // Require filtering for..in loops with obj.hasOwnProperty()
  "freeze"        : true,     // Prohibits overwriting prototypes of native objects such as Array, Date etc.
  "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
  "indent"        : 2,        // Number of spaces to use for indentation
  "latedef"       : "nofunc", // Require variables/functions to be defined before being used
  "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`
  "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`
  "noempty"       : true,     // Prohibit use of empty blocks
  "nonbsp"        : true,     // Prohibit "non-breaking whitespace" characters.
  "nonew"         : true,     // Prohibit use of constructors for side-effects (without assignment)
  "plusplus"      : false,    // Prohibit use of `++` & `--`
  "quotmark"      : "single", // Quotation mark consistency:
                              //   false    : do nothing (default)
                              //   true     : ensure whatever is used is consistent
                              //   "single" : require single quotes
                              //   "double" : require double quotes
  "undef"         : true,     // Require all non-global variables to be declared (prevents global leaks)
  "unused"        : true,     // Require all defined variables be used
  "strict"        : false,    // true: Requires all functions run in ES5 Strict Mode
  "maxparams"     : false,    // Max number of formal params allowed per function
  "maxdepth"      : false,    // Max depth of nested blocks (within functions)
  "maxstatements" : false,    // Max number statements per function
  "maxcomplexity" : 10,       // Max cyclomatic complexity per function
  "maxlen"        : 120,      // Max number of characters per line

  // Relaxing
  "asi"           : true,      // Tolerate Automatic Semicolon Insertion (no semicolons)
  "boss"          : true,      // Tolerate assignments where comparisons would be expected
  "debug"         : false,     // Allow debugger statements e.g. browser breakpoints.
  "eqnull"        : false,     // Tolerate use of `== null`
  "es5"           : false,     // Allow ES5 syntax (ex: getters and setters)
  "esnext"        : true,      // Allow ES.next (ES6) syntax (ex: `const`)
  "evil"          : false,     // Tolerate use of `eval` and `new Function()`
  "expr"          : true,      // Tolerate `ExpressionStatement` as Programs
  "funcscope"     : false,     // Tolerate defining variables inside control statements
  "globalstrict"  : false,     // Allow global "use strict" (also enables 'strict')
  "iterator"      : false,     // Tolerate using the `__iterator__` property
  "lastsemic"     : false,     // Tolerate omitting a semicolon for the last statement of a 1-line block
  "laxbreak"      : false,     // Tolerate possibly unsafe line breakings
  "laxcomma"      : false,     // Tolerate comma-first style coding
  "loopfunc"      : false,     // Tolerate functions being defined in loops
  "maxerr"        : 50,        // Maximum error before stopping
  "moz"           : false,     // Allow Mozilla specific syntax (extends and overrides esnext features)
                               // (ex: `for each`, multiple try/catch, function expressionâ€¦)
  "multistr"      : false,     // Tolerate multi-line strings
  "notypeof"      : false,     // Tolerate invalid typeof operator values
  "noyield"       : false,     // Tolerate generator functions with no yield statement in them.
  "proto"         : false,     // Tolerate using the `__proto__` property
  "scripturl"     : false,     // Tolerate script-targeted URLs
  "shadow"        : false,     // Allows re-define variables later in code e.g. `var x=1; x=2;`
  "sub"           : false,     // Tolerate using `[]` notation when it can still be expressed in dot notation
  "supernew"      : false,     // Tolerate `new function () { ... };` and `new Object;`
  "validthis"     : false,     // Tolerate using this in a non-constructor function

  // Environments
  "browser"       : true,     // Web Browser (window, document, etc)
  "couch"         : false,    // CouchDB
  "devel"         : false,    // Development/debugging (alert, confirm, etc)
  "dojo"          : false,    // Dojo Toolkit
  "jasmine"       : false,    // Jasmine
  "jquery"        : false,    // jQuery
  "mocha"         : true,     // Mocha
  "mootools"      : false,    // MooTools
  "node"          : true,     // Node.js
  "nonstandard"   : false,    // Widely adopted globals (escape, unescape, etc)
  "prototypejs"   : false,    // Prototype and Scriptaculous
  "qunit"         : false,    // QUnit
  "rhino"         : false,    // Rhino
  "shelljs"       : false,    // ShellJS
  "worker"        : false,    // Web Workers
  "wsh"           : false,    // Windows Scripting Host
  "yui"           : false,    // Yahoo User Interface

  // Custom Globals
  "globals"       : {}        // additional predefined global variables
}
